2864. Maximum Odd Binary Number

    Difficulty Level --> Easy

PROBLEM DESCRIPTION: 
     You are given a binary string s that contains at least one '1'.
     You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.
     Return a string representing the maximum odd binary number that can be created from the given combination.
     Note that the resulting string can have leading zeros

EXAMPLE 1:
Input: s = "010"
Output: "001"
Explanation: Because there is just one '1', it must be in the last position. So the answer is "001".

EXAMPLE 2
Input: s = "0101"
Output: "1001"
Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is "100". So the answer is "1001".


CONSTRAINTS:
1 <= s.length <= 100
s consists only of '0' and '1'.
s contains at least one '1'.


SOLUTION:
</CODE USING JAVA>

// Actual Code starts from the next line

class Solution {
    public String maximumOddBinaryNumber(String s) {
        char[] nums =s.toCharArray();
        char temp;
        int n= nums.length -1;
        int i=0;
        int j=n;
        while(i<=j){
            if(nums[i]=='1') i++;
            if(nums[j]=='0') j--;
            if(i<=j && nums[i]=='0' && nums[j]=='1'){
                temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
            }
        }
        temp=nums[j];
        nums[j]=nums[n];
        nums[n]=temp;
        return new String(nums);
    }
    
}

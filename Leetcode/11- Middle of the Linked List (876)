876. Middle of the Linked List

    Difficulty Level --> Easy

PROBLEM DESCRIPTION: 
     Given the head of a singly linked list, return the middle node of the linked list.
     If there are two middle nodes, return the second middle node.

 
EXAMPLE 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

EXAMPLE 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

 
CONSTRAINTS:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100


SOLUTION:
</CODE USING JAVA>

// Actual Code starts from the next line

class Solution {
    public ListNode middleNode(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode middle = head;
        int count  = 1;
        while(head.next != null){
            head = head.next;
            count++;
            if(count%2==0){
                middle = middle.next;
            }
        }
        return middle;
    }
}
